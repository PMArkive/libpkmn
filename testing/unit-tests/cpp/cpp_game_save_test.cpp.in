/*
 * Copyright (c) 2016 Nicholas Corgan (n.corgan@gmail.com)
 *
 * Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt
 * or copy at http://opensource.org/licenses/MIT)
 */

#include "pkmn_boost_unit_test.hpp"

#include <pkmntest/game_save_tests.hpp>

#include <pkmn/game_save.hpp>

#include <string>

/*
 * Red
 */
BOOST_AUTO_TEST_CASE(red_test)
{
    std::string filepath = "@POKEMON_RED_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "Red/Blue/Yellow"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "Red");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * TODO: Blue
 */

/*
 * Yellow
 */
BOOST_AUTO_TEST_CASE(yellow_test)
{
    std::string filepath = "@POKEMON_YELLOW_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "Red/Blue/Yellow"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "Yellow");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * Gold
 */
BOOST_AUTO_TEST_CASE(gold_test)
{
    std::string filepath = "@POKEMON_GOLD_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "Gold/Silver"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "Gold");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * TODO: Silver
 */

/*
 * Crystal
 */
BOOST_AUTO_TEST_CASE(crystal_test)
{
    std::string filepath = "@POKEMON_CRYSTAL_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "Crystal"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "Crystal");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * Ruby
 */
BOOST_AUTO_TEST_CASE(ruby_test)
{
    std::string filepath = "@POKEMON_RUBY_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "Ruby/Sapphire"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "Ruby");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * TODO: Sapphire
 */

/*
 * Emerald
 */
BOOST_AUTO_TEST_CASE(emerald_test)
{
    std::string filepath = "@POKEMON_EMERALD_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "Emerald"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "Emerald");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * FireRed
 */
BOOST_AUTO_TEST_CASE(firered_leafgreen_test)
{
    std::string filepath = "@POKEMON_FIRERED_SAV@";

    // Make sure we'll be using the correct implementation.
    BOOST_REQUIRE_EQUAL(
        pkmn::game_save::detect_type(filepath),
        "FireRed/LeafGreen"
    );

    pkmn::game_save::sptr save = pkmn::game_save::from_file(filepath);
    BOOST_REQUIRE_EQUAL(save->get_game(), "FireRed");
    pkmntest::game_save_test_common_fields(save);
}

/*
 * TODO: LeafGreen
 */
