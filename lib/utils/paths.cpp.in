/*
 * Copyright (c) 2016 Nicholas Corgan (n.corgan@gmail.com)
 *
 * Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt
 * or copy at http://opensource.org/licenses/MIT)
 */

#include "env.hpp"
#include "../SQLiteCpp/SQLiteCpp.h"

#include <pkmn/utils/paths.hpp>

#include <boost/filesystem.hpp>
#include <boost/archive/tmpdir.hpp>

#include <stdexcept>

namespace fs = boost::filesystem;

// Store fs::paths for CMake-generated paths
static const fs::path cmake_install_prefix("@CMAKE_INSTALL_PREFIX@");
static const fs::path pkmn_database_path("@PKMN_DATABASE_PATH@");
static const fs::path pkmn_images_dir("@PKMN_IMAGES_DIR@");

namespace pkmn {

    static fs::path env_var_to_fs_path(
        const std::string &env_var,
        bool must_exist = true
    ) {
        std::string value = pkmn_getenv(env_var);
        if(value.empty()) {
            return fs::path();
        }

        fs::path fs_path(value);
        return (fs::exists(fs_path) and must_exist) ? fs_path : fs::path();
    }

    // TODO: conventions for iOS, Android
    std::string get_appdata_dir() {
        fs::path fs_path = env_var_to_fs_path(
                               "PKMN_APPDATA_DIR",
                               false
                           );
        if(!fs_path.empty()) {
            return fs_path.string();
        }

#ifdef PKMN_PLATFORM_WIN32
        fs::path os_path = env_var_to_fs_path("APPDATA");
#else
        fs::path os_path = env_var_to_fs_path("HOME");
#endif
        os_path /= fs::path(".pkmn");
        return os_path.string();
    }

    std::string get_database_path() {
        std::string path_to_check;

        fs::path fs_path = env_var_to_fs_path("PKMN_DATABASE_PATH");
        if(!fs_path.empty()) {
            path_to_check = fs_path.string();
        } else if(fs::exists(pkmn_database_path)) {
            path_to_check = pkmn_database_path.string();
        } else {
            throw std::runtime_error("No LibPKMN database found.");
        }

        // We have a path. Make sure it's a LibPKMN database.
        try {
            SQLite::Database db(path_to_check);
            PKMN_UNUSED(int compat_num) = db.execAndGet("SELECT compat_num FROM compat_num");
            return path_to_check;
        } catch(const std::exception&) {
            throw std::runtime_error("No LibPKMN database found.");
        }
    }

    std::string get_images_dir() {
        fs::path fs_path = env_var_to_fs_path("PKMN_IMAGES_DIR");
        if(!fs_path.empty()) {
            return fs_path.string();
        }

        if(fs::exists(pkmn_images_dir)) {
            return pkmn_images_dir.string();
        } else {
            throw std::runtime_error("No LibPKMN images directory found.");
        }
    }

    std::string get_tmp_dir() {
        /*
         * The Boost function checks the environment variables "TMP",
         * "TMPDIR", and "TEMP" but oddly returns "." if none of those
         * are populated, so if none of those work, it's probably a
         * UNIX-like system, in which case "/tmp" is probably safe.
         */
        static const std::string tmp_from_boost = boost::archive::tmpdir();
        return tmp_from_boost == "." ? "/tmp" : tmp_from_boost;
    }
}
